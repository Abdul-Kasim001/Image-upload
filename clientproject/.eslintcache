[{"/home/akm/Desktop/Nodejs_Mongodb_Express_Multer-main/clientproject/src/index.js":"1","/home/akm/Desktop/Nodejs_Mongodb_Express_Multer-main/clientproject/src/App.js":"2","/home/akm/Desktop/Nodejs_Mongodb_Express_Multer-main/clientproject/src/reportWebVitals.js":"3","/home/akm/Desktop/Nodejs_Mongodb_Express_Multer-main/clientproject/src/data/api.js":"4","/home/akm/Desktop/Nodejs_Mongodb_Express_Multer-main/clientproject/src/screens/FileUploadScreen.js":"5"},{"size":500,"mtime":1660041623298,"results":"6","hashOfConfig":"7"},{"size":2712,"mtime":1660043684547,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1610639324000,"results":"9","hashOfConfig":"7"},{"size":842,"mtime":1610639324000,"results":"10","hashOfConfig":"7"},{"size":5283,"mtime":1610639324000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"g73953",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"/home/akm/Desktop/Nodejs_Mongodb_Express_Multer-main/clientproject/src/index.js",[],["26","27"],"/home/akm/Desktop/Nodejs_Mongodb_Express_Multer-main/clientproject/src/App.js",["28"],"import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport FileUploadScreen from './screens/FileUploadScreen';\nimport {getSingleFiles, getMultipleFiles} from './data/api';\n\nfunction App() {\n  const [singleFiles, setSingleFiles] = useState([]);\n  const [multipleFiles, setMultipleFiles] = useState([]);\n\n  const getSingleFileslist = async () => {\n    try {\n        const fileslist = await getSingleFiles();\n        setSingleFiles(fileslist);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  const getMultipleFilesList = async () => {\n    try {\n        const fileslist = await getMultipleFiles();\n        setMultipleFiles(fileslist);\n        console.log(multipleFiles);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  useEffect(() => {\n    getSingleFileslist();\n    getMultipleFilesList();\n  }, []);\n  return (\n    <>\n        <div className=\"container\">\n          <h3 className=\"text-danger font-weight-bolder border-bottom text-center\">Single & Multiple File Upload Using MERN Stack </h3>\n          <FileUploadScreen getsingle={() => getSingleFileslist()} getMultiple={() => getMultipleFilesList()}/>\n       </div> \n       <div className=\"container-fluid mt-5\">\n         <div className=\"row\">\n           <div className=\"col-6\">\n             <h4 className=\"text-success font-weight-bold\">Single Files List(user)</h4>\n             <div className=\"row\">\n                {singleFiles.map((file, index) => \n                  <div className=\"col-6\">\n                    <div className=\"card mb-2 border-0 p-0\">\n                      <img src={`http://localhost:8080/${file.filePath}`} height=\"200\" className=\"card-img-top img-responsive\" alt=\"img\"/>\n                      </div>\n                  </div>\n                )}\n             </div>\n           </div>\n           <div className=\"col-6\">\n             <h4 className=\"text-success font-weight-bold\">Multiple Files List(Admin)</h4>\n             {multipleFiles.map((element, index) =>\n                <div key={element._id}>\n                    <h6 className=\"text-danger font-weight-bold\">{element.title}</h6>\n                    <div className=\"row\">\n                      {element.files.map((file, index) =>\n                        <div className=\"col-6\">\n                            <div className=\"card mb-2 border-0 p-0\">\n                              <img src={`http://localhost:8080/${file.filePath}`} height=\"200\" className=\"card-img-top img-responsive\" alt=\"img\"/>\n                              </div>\n                          </div>\n                       )}\n                      </div>\n                </div>\n              )}\n           </div>\n         </div>\n       </div>\n    </>\n  );\n}\n\nexport default App;\n","/home/akm/Desktop/Nodejs_Mongodb_Express_Multer-main/clientproject/src/reportWebVitals.js",[],"/home/akm/Desktop/Nodejs_Mongodb_Express_Multer-main/clientproject/src/data/api.js",[],["29","30"],"/home/akm/Desktop/Nodejs_Mongodb_Express_Multer-main/clientproject/src/screens/FileUploadScreen.js",["31"],"import React, {useState, useEffect} from 'react';\nimport {singleFileUpload, multipleFilesUpload} from '../data/api';\nimport {CircularProgressbar, buildStyles} from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\n\nconst FileUploadScreen = (props) => {\n    const [singleFile, setSingleFile] = useState('');\n    const [multipleFiles, setMultipleFiles] = useState('');\n    const [title, setTitle] =  useState('');\n    const [singleProgress, setSingleProgress] = useState(0);\n    const [multipleProgress, setMultipleProgress] = useState(0);\n\n    const SingleFileChange = (e) => {\n        setSingleFile(e.target.files[0]);\n        setSingleProgress(0);\n    }\n    const MultipleFileChange = (e) => {\n        setMultipleFiles(e.target.files);\n        setMultipleProgress(0);\n    }\n    const singleFileOptions = {\n        onUploadProgress: (progressEvent) => {\n            const {loaded, total} = progressEvent;\n            const percentage = Math.floor(((loaded / 1000) * 100) / (total / 1000));\n            setSingleProgress(percentage);\n        }\n    }\n    const mulitpleFileOptions = {\n        onUploadProgress: (progressEvent) => {\n            const {loaded, total} = progressEvent;\n            const percentage = Math.floor(((loaded / 1000) * 100) / (total / 1000));\n            setMultipleProgress(percentage);\n        }\n    }\n    const uploadSingleFile = async () => {\n        const formData = new FormData();\n        formData.append('file', singleFile);\n        await singleFileUpload(formData, singleFileOptions);\n        props.getsingle();\n    }\n    const UploadMultipleFiles = async () => {\n        const formData = new FormData();\n        formData.append('title', title);\n        for (let i = 0; i < multipleFiles.length; i++) {\n            formData.append('files', multipleFiles[i]);                      \n        }\n        await multipleFilesUpload(formData, mulitpleFileOptions);\n        props.getMultiple();\n    }\n    return (\n        <div className=\"row mt-3\">\n            <div className=\"col-6\">\n                <div className=\"form-group\">\n                    <label>Select Single File</label>\n                    <input type=\"file\" className=\"form-control\" onChange={(e) => SingleFileChange(e)} />\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-10\">\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={() => uploadSingleFile()} >Upload</button>\n                    </div>\n                    <div className=\"col-2\">\n                        <CircularProgressbar\n                            value={singleProgress}\n                            text={`${singleProgress}%`}\n                            styles={buildStyles({\n                                rotation: 0.25,\n                                strokeLinecap: 'butt',\n                                textSize: '16px',\n                                pathTransitionDuration: 0.5,\n                                pathColor: `rgba(255, 136, 136, ${singleProgress / 100})`,\n                                textColor: '#f88',\n                                trailColor: '#d6d6d6',\n                                backgroundColor: '#3e98c7',\n                            })}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-6\">\n                   <div className=\"row\">\n                       <div className=\"col-6\">\n                            <label >Title</label>\n                            <input type=\"text\" onChange={(e) => setTitle(e.target.value) } placeholder=\"enter title for your gallery\" className=\"form-control\"/>\n                       </div>\n                       <div className=\"col-6\">\n                        <div className=\"form-group\">\n                            <label>Select Multiple Files</label>\n                            <input type=\"file\" onChange={(e) => MultipleFileChange(e)} className=\"form-control\" multiple />\n                        </div>\n                       </div>\n                   </div>                   \n                    <div className=\"row\">\n                        <div className=\"col-10\">\n                            <button type=\"button\" onClick={() => UploadMultipleFiles()}  className=\"btn btn-danger\">Upload</button>\n                        </div>\n                        <div className=\"col-2\">\n                        <CircularProgressbar\n                            value={multipleProgress}\n                            text={`${multipleProgress}%`}\n                            styles={buildStyles({\n                                rotation: 0.25,\n                                strokeLinecap: 'butt',\n                                textSize: '16px',\n                                pathTransitionDuration: 0.5,\n                                pathColor: `rgba(255, 136, 136, ${multipleProgress / 100})`,\n                                textColor: '#f88',\n                                trailColor: '#d6d6d6',\n                                backgroundColor: '#3e98c7',\n                            })}\n                        />\n                    </div>\n                    </div>\n                </div>\n        </div>\n    );\n}\n\nexport default FileUploadScreen;",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":30,"column":6,"nodeType":"38","endLine":30,"endColumn":8,"suggestions":"39"},{"ruleId":"32","replacedBy":"40"},{"ruleId":"34","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":26,"nodeType":"44","messageId":"45","endLine":1,"endColumn":35},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMultipleFilesList'. Either include it or remove the dependency array.","ArrayExpression",["48"],["46"],["47"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"49","fix":"50"},"Update the dependencies array to be: [getMultipleFilesList]",{"range":"51","text":"52"},[834,836],"[getMultipleFilesList]"]